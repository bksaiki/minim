(import (prefix #%c-kernel $))

;; --------------------------------------------------------
;; Low-level exceptions

(export error
        raise-argument-error)

(define (error who msg . args)
  ($error who msg args))

(define (raise-argument-error who expect v)
  (error who "contract violation" expect v))

;; --------------------------------------------------------
;; Contract-less primitives

;; type predicates

(export null?
        symbol?
        fixnum?
        char?
        string?
        pair?
        procedure?
        list?)

(define null? $null?)
(define symbol? $symbol?)
(define fixnum? $fixnum?)
(define char? $char?)
(define string? $string?)
(define pair? $pair?)
(define procedure? $procedure?)
(define list? $list?)

;; constructors

(export cons
        list)

(define cons $cons)
(define list $list)

;; special

(export apply
        call/cc
        call-with-current-continuation
        call-with-values
        dynamic-wind
        values
        void)

(define apply $apply)
(define call/cc $call/cc)
(define call-with-current-continuation call/cc)
(define call-with-values $call-with-values)
(define dynamic-wind $dynamic-wind)
(define values $values)
(define void $void)

;; --------------------------------------------------------
;; Pairs

(export car
        cdr)

(define (car x)
  (unless (pair? x)
    (raise-argument-error 'car "pair?" x))
  ($car x))
      
(define (cdr x)
  (unless (pair? x)
    (raise-argument-error 'cdr "pair?" x))
  ($cdr x))

;; --------------------------------------------------------
;; Lists

(export length
        reverse
        append
        map1)

(define (non-list-error name x)
  (raise-argument-error name "list?" x))

(define (length x)
  (unless (list? x)
    (non-list-error 'length x))
  ($length x))

(define (reverse x)
  (unless (list? x)
    (non-list-error 'reverse x))
  ($reverse x))

(define (append . xss)
  (cond
    [(null? xss) '()]
    [(null? (cdr xss))
     (unless (list? (car xss))
       (non-list-error 'append (car xss)))
     (car xss)]
    [(null? (cddr xss))
     (unless (list? (car xss))
       (non-list-error 'append (car xss)))
     (unless (list? (cadr xss))
       (non-list-error 'append (cadr xss)))
     ($append (car xss) (cadr xss))]
    [else
     (let loop ([acc '()] [xss (reverse xss)])
       (cond
         [(null? xss) acc]
         [(list? xss) (loop ($append (car xss) acc) (cdr xss))]
         [else (non-list-error 'append (car xss))]))]))

(define (map1 f xs)
  (if (null? xs)
      '()
      (let loop ([xs xs] [ys '()])
        (if (null? xs)
            (reverse ys)
            (loop (cdr xs) (cons (f (car xs)) ys))))))
