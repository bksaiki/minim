(import (prefix #%c-kernel $))

;; --------------------------------------------------------
;; Low-level exceptions

(export error
        raise-argument-error)

(define (error who msg . args)
  ($error who msg args))

(define (raise-argument-error who expect v)
  (error who "contract violation" expect v))

;; --------------------------------------------------------
;; Contract-less primitives

;; type predicates

(export null?
        symbol?
        fixnum?
        char?
        string?
        pair?
        procedure?)

(define null? $null?)
(define symbol? $symbol?)
(define fixnum? $fixnum?)
(define char? $char?)
(define string? $string?)
(define pair? $pair?)
(define procedure? $procedure?)

;; constructors

(export cons
        list
        void)

(define cons $cons)
(define list $list)
(define void $void)

;; --------------------------------------------------------
;; Pairs

; (define (car x)
;   (if ()
;    (raise-argument-error 'car "pair?" x)
      


;; --------------------------------------------------------
;; Lists

(define (map1 f xs)
  (if (null? xs)
      '()
      (let loop ([xs xs] [ys '()])
        (if (null? xs)
            (reverse ys)
            (loop (cdr xs) (cons (f (car xs)) ys))))))
